@page "/"
@using Scrabble.Client.Components

<PageTitle>Scrabble</PageTitle>


<AuthorizeView Policy="@Policies.IsPlayer">
    <Authorized>
        <GameList></GameList>
    </Authorized>
    <NotAuthorized>

        <AuthorizeView Context=SomeOtherName>
            <Authorized>
                <!--  Note: This message appears both while authenticating, as well as once registered but not approved.
                       The 2nd case is shown after a delay.  -->

                <h1> @AuthMessage1</h1>
                <h2> @AuthMessage2</h2>

            <img class="img-fluid" style="margin-left:2rem" alt="Scrabble" src="/images/ScrabbleBoard2.jpg" />

            <p style="margin-left:2rem">
                Welcome to Scrabble!

            </p>

            </Authorized>
            <NotAuthorized>
                <img class="img-fluid" style="margin-left:2rem" alt="Scrabble" src="/images/ScrabbleBoard2.jpg" />

                <p style="margin-left:2rem">
                    Welcome to Scrabble!
                </p>
            </NotAuthorized>
        </AuthorizeView>

    </NotAuthorized>
</AuthorizeView>






@code {
    private const int AuthenticateWaitDelay = 10000; // Milliseconds

    private string AuthMessage1 { get; set; } = "Authorizing..";
    private string AuthMessage2 { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var task = Task.Run(UpdateMessage);
    }

    private async Task UpdateMessage()
    {
        await Task.Delay(AuthenticateWaitDelay);
        AuthMessage1 = "Thank you ... awaiting Administrator approval.";
        AuthMessage2 = "(May take some time.)";
        await InvokeAsync(StateHasChanged);
    }
}


